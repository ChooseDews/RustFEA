use crate::elements::base_element::Material;
use crate::elements::brick_element::BrickElement;
use crate::elements::BaseElement;
use crate::node::Node;
use crate::simulation::Simulation;
use std::fs::File;
use std::io::prelude::*;

pub fn write_vtk(filename: &str, simulation: &Simulation) -> std::io::Result<()> {
    let mut file = File::create(filename)?;

    // Write VTK header
    file.write_all(b"# vtk DataFile Version 2.0\n")?;
    file.write_all(b"Generated by Rust\n")?;
    file.write_all(b"ASCII\n")?;
    file.write_all(b"DATASET UNSTRUCTURED_GRID\n")?;

    let nodes = simulation.nodes();
    // Write points (nodes)
    writeln!(file, "POINTS {} float", nodes.len())?;
    for node in nodes {
        writeln!(
            file,
            "{} {} {}",
            node.position.x, node.position.y, node.position.z
        )?;
    }

    let elements = simulation.elements();

    // Write cells (elements)
    let elements_size = elements.len();
    let total_list_entries = elements_size * 9; // 8 nodes per element + 1 value for the number of points in the cell
    writeln!(file, "CELLS {} {}", elements.len(), total_list_entries)?;
    {
        for elem in elements {
            file.write_all(b"8 ")?; // 8-node brick element
            for &id in elem.get_connectivity() {
                write!(file, "{} ", id)?; // VTK uses 0-based index
            }
            file.write_all(b"\n")?;
        }
    }

    // Write cell types (12 for hexahedron in VTK)
    writeln!(file, "CELL_TYPES {}", elements_size)?;
    for _ in 0..elements_size {
        file.write_all(b"12\n")?;
    }

    // Write point data for nodal displacements
    writeln!(file, "POINT_DATA {}", nodes.len())?;
    writeln!(file, "VECTORS displacement float")?;
    for node in nodes {
        writeln!(
            file,
            "{} {} {}",
            node.displacement.x, node.displacement.y, node.displacement.z
        )?;
    }

    Ok(())
}
